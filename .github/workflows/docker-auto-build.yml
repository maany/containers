name: docker-auto-build

on:
  release: 
    types: [created]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        context_dir: ['clients', 'server', 'daemons']
      fail-fast: false
    
    steps:      
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1 
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Checkout the containers repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get the release tag
        id: release_tag
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Fetch all branches
        shell: bash
        run: |
          REPO_URL=$(echo 'git://github.com/${{ github.repository_owner }}/containers.git') 
          BRANCHES=$(git ls-remote --heads $REPO_URL | awk -F '\t' '{print $NF}' | cut -f3- -d'/')
          git fetch origin $BRANCHES
      
      - name: Get the release tag from GitHub
        id: release_tag
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Generate Release Tags
        id: release
        shell: bash
        run: |  
          GIT_TAG=${{ steps.release_tag.outputs.version }}
          IMAGE_TAG=$(echo '${{ github.repository_owner }}/rucio-${{ matrix.context_dir }}:release'-$GIT_TAG)
          DOCKER_HUB_TAGS=$IMAGE_TAG

          GIT_TAG_COMMIT_SHA=$(echo $(git rev-list -n 1 $GIT_TAG))
          GIT_MASTER_LATEST_COMMIT_SHA=$(echo $(git ls-remote --heads origin | grep master  |  awk -F '\t' '{print $1}'))
          
          if [ $GIT_MASTER_LATEST_COMMIT_SHA = $GIT_TAG_COMMIT_SHA ]; then
            LATEST_TAG=$(echo '${{ github.repository_owner }}/rucio-${{ matrix.context_dir }}:latest')
            DOCKER_HUB_TAGS=$DOCKER_HUB_TAGS,$LATEST_TAG
          fi

          echo ::set-output name=tag::$GIT_TAG
          echo ::set-output name=tags::$DOCKER_HUB_TAGS
          
          echo "For tag: $GIT_TAG, the following images will be deployed: $DOCKER_HUB_TAGS"
          

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./${{ matrix.context_dir }}
      #     push: true
      #     tags: '${{ steps.release.outputs.tags }}'
      #     build-args: TAG=${{ steps.release.outputs.tag }}
