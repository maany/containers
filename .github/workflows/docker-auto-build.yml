name: docker-auto-build

on:
  release: 
    types: [created]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        context: [
          'clients, prepend-rucio, prepend-release, push-tagged, push-latest', 
          'server, prepend-rucio, prepend-release, push-tagged, push-latest',
          'daemons, prepend-rucio, prepend-release, push-tagged, push-latest',
          'ui, prepend-rucio, prepend-release, push-tagged, push-latest',
          'init, prepend-rucio, prepend-release, push-tagged, push-latest',
          'fts, force-latest',
          'fts-cron, force-latest',
          'ssh, force-latest',
          'xrootd, force-latest',
          'xrootd-noauth, force-latest'
          ]
      fail-fast: false
    
    steps:      
      - name: Checkout the containers repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch all branches
        shell: bash
        run: |
          REPO_URL=$(echo 'git://github.com/${{ github.repository_owner }}/containers.git') 
          BRANCHES=$(git ls-remote --heads $REPO_URL | awk -F '\t' '{print $NF}' | cut -f3- -d'/')
          git fetch origin $BRANCHES
      
      - name: Get the release tag from GitHub
        id: release_tag
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      
      - name: Generate Docker Image Names
        id: release
        shell: bash
        run: |  
          CONTEXT=$(echo "${{ matrix.context }}")
          CONTEXT_DIR=$(echo "${{ matrix.context }}" | cut -d, -f1 )
          GIT_TAG=${{ steps.release_tag.outputs.version }}
          BASE_TAG="${{ github.repository_owner}}/"
          
          GIT_TAG_COMMIT_SHA=$(echo $(git rev-list -n 1 $GIT_TAG))
          GIT_MASTER_LATEST_COMMIT_SHA=$(echo $(git ls-remote --heads origin | grep master  |  awk -F '\t' '{print $1}'))

          if [[ ${CONTEXT} =~ .*"prepend-rucio".* ]]; then
            BASE_TAG+="rucio-$CONTEXT_DIR"
          else
            BASE_TAG+=$CONTEXT_DIR
          fi

          LATEST_TAG="$BASE_TAG:latest"
          IMAGE_TAG+="$BASE_TAG"
          TAGS_TO_PUSH=''
          
          if [[ ! ${CONTEXT} =~ .*"prepend-release".* && ! ${CONTEXT} =~ .*"push-tagged".* ]]; then
            echo "Config Error. Will push latest tag if commit hash matches with master branch."
          elif [[ ! ${CONTEXT} =~ .*"prepend-release".* && ${CONTEXT} =~ .*"push-tagged".* ]]; then
            IMAGE_TAG+=":$GIT_TAG"
          elif [[ ${CONTEXT} =~ .*"prepend-release".* && ! ${CONTEXT} =~ .*"push-tagged".* ]]; then
            echo "Config Error!! Will push latest tag if commit hash matches with master branch."
          else
            IMAGE_TAG+=":release-$GIT_TAG"
          fi

          if [[ "${CONTEXT}" =~ .*"push-latest".* &&  $GIT_MASTER_LATEST_COMMIT_SHA == $GIT_TAG_COMMIT_SHA  ]]; then
              echo "There's a match between the SHA of latest commit on Master ($GIT_MASTER_LATEST_COMMIT_SHA) and \
                    latest commit on current tag $TAG ($GIT_TAG_COMMIT_SHA)"
              echo "An image with latest tag will be pushed to Docker Hub"
              IMAGE_TAG=$IMAGE_TAG,$LATEST_TAG
          else
              echo "Note: Image tagged latest will not be pushed!!"
              echo "Latest commit on Master: $GIT_MASTER_LATEST_COMMIT_SHA"
              echo "Latest commit on $GIT_TAG: $GIT_TAG_COMMIT_SHA"
          fi

          if [[ "${CONTEXT}" =~ .*"force-latest".* &&  $GIT_MASTER_LATEST_COMMIT_SHA == $GIT_TAG_COMMIT_SHA  ]]; then
            echo "Will force push the latest tag"  
            IMAGE_TAG=$IMAGE_TAG,$LATEST_TAG
          fi
          echo $IMAGE_TAG
          echo $CONTEXT

          
          # if [ $GIT_MASTER_LATEST_COMMIT_SHA = $GIT_TAG_COMMIT_SHA ]; then
          #   LATEST_TAG=$(echo '${{ github.repository_owner }}/rucio-${{ matrix.context }}:latest')
          #   DOCKER_HUB_TAGS=$DOCKER_HUB_TAGS,$LATEST_TAG
          # fi

          echo ::set-output name=tag::$GIT_TAG
          echo ::set-output name=tags::$IMAGE_TAG
          
          echo "For tag: $GIT_TAG, the following images will be pushed: $IMAGE_TAG"
          
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1 
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./${{ matrix.context }}
      #     push: true
      #     tags: '${{ steps.release.outputs.tags }}'
      #     build-args: TAG=${{ steps.release.outputs.tag }}
