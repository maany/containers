name: docker-auto-build

on:
  release: 
    types: [created]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        context_dir: ['clients', 'server', 'daemons']
      fail-fast: false
    
    steps:      
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1 
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Checkout the containers repository
        uses: actions/checkout@v2
        with:
          ref: '1.23.16'
          fetch-depth: 0
        # TODO remove
      - name: Get the new Release Tag
        id: release
        shell: bash
        run: |
          # git fetch --prune --unshallow --tags
          REPO_URL=$(echo 'git://github.com/${{ github.repository_owner }}/containers.git') 
          echo $REPO_URL
          BRANCHES=$(git ls-remote --heads $REPO_URL | awk -F '\t' '{print $NF}' | cut -f3- -d'/')
          echo $BRANCHES
          git fetch origin $BRANCHES
          git branch -v
          # GIT_TAG=$(echo $(git describe --tags --abbrev=0))
          # TAG_SOURCE_BRANCH=$(echo $(git branch --contains tags/$GIT_TAG))
          # IMAGE_TAG=$(echo '${{ github.repository_owner }}/rucio-${{ matrix.context_dir }}:release'-$GIT_TAG)
          # DOCKER_HUB_TAGS=$IMAGE_TAG

          # LATEST_TAG=$(echo '${{ github.repository_owner }}/rucio-${{ matrix.context_dir }}:latest')
          # DOCKER_HUB_TAGS=$DOCKER_HUB_TAGS,$LATEST_TAG
          # echo ::set-output name=tag::$GIT_TAG
          # echo ::set-output name=tags::$DOCKER_HUB_TAGS
          # # TODO remove
          # echo "*****"
          # echo $TAG_SOURCE_BRANCH
          # echo $GIT_TAG

          # echo $TAG_SOURCE_BRANCH
          # if [[ "$TAG_SOURCE_BRANCH" == *"$master"* ]]; then
          #   echo "It's there."
          # else
          #   echo "Not there"
          # fi
          # echo $REPO_URL
          # echo $BRANCHES
          # git remote -v

          # echo "*****"
          # git fetch $REPO_URL $BRANCHES
      # - name: Prepare Docker Image name
      #   shell: bash
      #   run: |
      #     echo 'The following images will be pushed'
      #     echo '${{ steps.release.outputs.image }}'
      #     echo '${{ steps.release.outputs.latest }}'

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./${{ matrix.context_dir }}
      #     push: true
      #     tags: '${{ steps.release.outputs.tags }}'
      #     build-args: TAG=${{ steps.release.outputs.tag }}
